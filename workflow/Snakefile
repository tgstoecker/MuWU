from snakemake.utils import min_version

min_version("6.3.0")

import pandas as pd
import yaml
import os.path
from os import path

configfile: "config/config.yaml"


# assign directory containing sequencing reads as specified in config.yaml
reads_dir = config["reads_dir"]

#for the quick-hacked typing of insertions -> statically defined variables
SAMPLES=config["SAMPLES"]
PAIRED=config["PAIRED"]
TE_TYPES=config["TE_types"]
INSERTION_TABLES_GRID=config["INSERTION_TABLES_GRID"]
INSERTION_TABLES_GENERIC=config["INSERTION_TABLES_GENERIC"]


include: "rules/common_utils.smk"
include: "rules/common.smk"
include: "rules/ref_utils.smk"
include: "rules/ref.smk"
include: "rules/quality_control.smk"
include: "rules/trimming.smk"
include: "rules/mapping.smk"
include: "rules/duplicate_removal.smk"
include: "rules/indexes_bam2sam.smk"
include: "rules/insertion_identification.smk"
include: "rules/insertion_annotation.smk"
include: "rules/te_typing.smk"

#### ONLY FOR GRID DESIGN (STOCK MATRIX) BASED ANALYSIS ####
if config["approach"] == "GRID" and config["TE_TYPING"] != "perform":
    rule all:
        input:
            # final annotation table reagrdless of rule path for annotation file
            "resources/final_annotation_table",
            Checkpoint_ReadSampleSheet_GRID("results/mapped/{sample}.sorted.bam.bai"),
            Checkpoint_ReadSampleSheet_GRID("results/dedup/{sample}.dedup.bam.bai"),
            Checkpoint_ReadSampleSheet_GRID("results/dedup_sam/{sample}.dedup.sam"),
            #multiqc
            "results/multiqc/multiqc.html",
            #insertion identification identification results
            "results/insertions_table_final/all_identified_insertions.csv",
            "results/insertions_table_final/germinal_identified_insertions.csv",
            #insertion annotation
            "results/insertions_table_final/all_identified_insertions_annotated.csv",
            "results/insertions_table_final/germinal_identified_insertions_annotated.csv",

elif config["approach"] == "GRID" and config["TE_TYPING"] == "perform":
    rule all:
        input:
            # final annotation table reagrdless of rule path for annotation file
            "resources/final_annotation_table",
            Checkpoint_ReadSampleSheet_GRID("results/mapped/{sample}.sorted.bam.bai"),
            Checkpoint_ReadSampleSheet_GRID("results/dedup/{sample}.dedup.bam.bai"),
            Checkpoint_ReadSampleSheet_GRID("results/dedup_sam/{sample}.dedup.sam"),           
            #multiqc
            "results/multiqc/multiqc.html",
            #insertion identification identification results
            "results/insertions_table_final/all_identified_insertions.csv",
            "results/insertions_table_final/germinal_identified_insertions.csv",
            #insertion annotation
            "results/insertions_table_final/all_identified_insertions_annotated.csv",
            "results/insertions_table_final/germinal_identified_insertions_annotated.csv",
            #te/element typing
            "results/insertions_table_final_te_typed/headers_strand_1_uncategorized_all_identified_insertions.csv",
#            expand("results/te_typing/uncategorized_clustered/final_clstr_file_{insertion_table}.tsv", insertion_table=INSERTION_TABLES_GRID),
            "test.output"


#### ONLY FOR GENERIC ANALYSIS - NO STOCK MATRIX ####
elif config["approach"] == "GENERIC":

    if not is_single_end_GENERIC_experiment(SAMPLES):

        rule all:
            input:
                #fastqc
                expand("results/fastqc/raw/{sample}_1_fastqc.html", sample=SAMPLES),
                expand("results/fastqc/raw/{sample}_1_fastqc.zip", sample=SAMPLES),
                expand("results/fastqc/raw/{sample}_2_fastqc.html", sample=SAMPLES),
                expand("results/fastqc/raw/{sample}_2_fastqc.zip", sample=SAMPLES),
                #cutadapt
#                expand("results/cut_reads/{sample}.1.fq.gz", sample=SAMPLES),
#                expand("results/cut_reads/{sample}.2.fq.gz", sample=SAMPLES),
#                expand("results/cut_reads/{sample}.qc.txt", sample=SAMPLES),
                #trimmomatic
                expand("results/trimmed_reads/{sample}.1.fq.gz", sample=SAMPLES),
                expand("results/trimmed_reads/{sample}.2.fq.gz", sample=SAMPLES),
                #fastqc trimmed
                expand("results/fastqc/trimmed/{sample}_1_fastqc.html", sample=SAMPLES),
                expand("results/fastqc/trimmed/{sample}_1_fastqc.zip", sample=SAMPLES),
                expand("results/fastqc/trimmed/{sample}_2_fastqc.html", sample=SAMPLES),
                expand("results/fastqc/trimmed/{sample}_2_fastqc.zip", sample=SAMPLES),
                #bowtie2 align
                expand("results/mapped/{sample}.sam", sample=SAMPLES),
                #samtools; SAM to sorted BAM
                expand("results/mapped/{sample}.sorted.bam", sample=SAMPLES),
                #picard + samtools view conversion to SAM format
                expand("results/dedup_sam/{sample}.dedup.sam", sample=SAMPLES),
                expand("results/dedup/{sample}.dedup.bam", sample=SAMPLES),
                #indexes
                expand("results/mapped/{sample}.sorted.bam.bai", sample=SAMPLES),
                expand("results/dedup/{sample}.dedup.bam.bai", sample=SAMPLES),
                #multiqc
                "results/multiqc/multiqc.html",
                #insertion identification
                "results/insertions_table_final/all_identified_insertions.csv",
                #insertion annotation
                "results/insertions_table_final/all_identified_insertions_annotated.csv",
                #te/element typing
                expand("results/te_typing/uncategorized_clustered/final_clstr_file_{insertion_table}.tsv", insertion_table=INSERTION_TABLES_GENERIC),

    elif is_single_end_GENERIC_experiment(SAMPLES):

        rule all:
            input:
                #fastqc
                expand("results/fastqc/raw/{sample}_1_fastqc.html", sample=SAMPLES),
                expand("results/fastqc/raw/{sample}_1_fastqc.zip", sample=SAMPLES),
                #cutadapt
#                expand("results/cut_reads/{sample}.1.fq.gz", sample=SAMPLES),
#                expand("results/cut_reads/{sample}.qc.txt", sample=SAMPLES),
                #trimmomatic
                expand("results/trimmed_reads/{sample}.1.fq.gz", sample=SAMPLES),
                #trimmed fastqc
                expand("results/fastqc/trimmed/{sample}_1_fastqc.html", sample=SAMPLES),
                expand("results/fastqc/trimmed/{sample}_1_fastqc.zip", sample=SAMPLES),
                #bowtie2 align
                expand("results/mapped/{sample}.sam", sample=SAMPLES),
                #samtools; SAM to sorted BAM
                expand("results/mapped/{sample}.sorted.bam", sample=SAMPLES),
                #picard + samtools view conversion to SAM format
                expand("results/dedup_sam/{sample}.dedup.sam", sample=SAMPLES),
                expand("results/dedup/{sample}.dedup.bam", sample=SAMPLES),
                #indexes
                expand("results/mapped/{sample}.sorted.bam.bai", sample=SAMPLES),
                expand("results/dedup/{sample}.dedup.bam.bai", sample=SAMPLES),
                #multiqc
                "results/multiqc/multiqc.html",
                #insertion identification
                "results/insertions_table_final/all_identified_insertions.csv",
                #insertion annotation
                "results/insertions_table_final/all_identified_insertions_annotated.csv",

       
