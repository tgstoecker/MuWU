#### Path to reference assembly in Fasta format and a corresponding annotation file ####
### If a URL is provided - the file will be downloaded and used automatically
### MuWU supports the following annotation file formats: .gff3(.gz), .gff(.gz), .gtf(.gz), .gbff(.gz), .dat(.gz) (GenBank)
### important: if a GenBank annotation is supplied both fasta and annotation are created from the file (so the user does not need to supply a fasta file)
### also important: we advise to search and download GenBank at NCBI (https://ftp.ncbi.nlm.nih.gov/genomes/ - genbank/ or refseq/) since .gbff files here exist for complete genomes,
###                 whereas ensembl stores individual chromosomes in dat.gz which first have to be merged.
###                 Our second recommendation is to use genbank/ under NCBI's directories as the gene name/locus tag refers to most commonly used ones and is not abstracted further under "gene_synonyms" like under refseq/.
###                 Finally, in case of GenBank format we also require an assembly_report.txt to be submitted under "report:".
###                 This is required so that we can rename the chromosome column entries to a proper chromosome name instead of the Assigned-Molecule name.
### Please provide absolute file paths if local files are provided:
fasta: http://ftp.ensemblgenomes.org/pub/plants/release-52/fasta/zea_mays/dna/Zea_mays.Zm-B73-REFERENCE-NAM-5.0.dna.toplevel.fa.gz
annotation: http://ftp.ensemblgenomes.org/pub/plants/release-52/gtf/zea_mays/Zea_mays.Zm-B73-REFERENCE-NAM-5.0.52.gtf.gz
#annotation: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/plant/Zea_mays/all_assembly_versions/suppressed/GCF_000005005.2_B73_RefGen_v4/GCF_000005005.2_B73_RefGen_v4_genomic.gbff.gz
#assembly_report: https://ftp.ncbi.nlm.nih.gov/genomes/refseq/plant/Zea_mays/all_assembly_versions/suppressed/GCF_000005005.2_B73_RefGen_v4/GCF_000005005.2_B73_RefGen_v4_assembly_report.txt
assembly_report:

#### Grid design or generic insertion identification approach - choices: 'GRID' or 'GENERIC'  ####
### using the GRID approach requires a suitable stock matrix .xlsx file (under config/stock_matrix), with which design and sample names are inferred
### using the GENERIC approach requires a samples.tsv file (under config/), with which sample names, SE vs. PE read type and optionally different conditions are inferred
### conditions in the generic approach allow for the parallel analysis of different sets of input data that should be kept seperate - seperate final output files (e.g. different treatments etc.)
## in either case please also provide location of your reads in your file system - read_dir:
approach: GRID
#approach: GENERIC


#### choose whether or not te/element typing should be performed
#if not; just change/remove perform flag here
TE_TYPING: perform

# this example implies that the user created a directory "rawreads" in the main workflow directory
# any location on the file system works (be careful with relative paths!)
reads_dir: rawreads


#### change adapter and transposon sequences that should be removed  ####
# removal is performed by cutadapt - link to manual: https://cutadapt.readthedocs.io/en/stable/index.html
# cutadapt allows us to precisely remove every kind of adapter or prev. known sequence (-a/g/A/G/^ options)
# in the MuSeq approach what should remain is TSD+genomic DNA; modify to your needs
# choices here reflect BonnMu experimental setup - https://academic.oup.com/plphys/article/184/2/620/6117865:
# corresponding to the Mu-TIR sequence; after that Illumina adapters, U adapter
# We use yaml folded style (>) so indention in each line will be ignored. 
# (-) "block chomping indicator" to eliminate the trailing line break, that would normally be inserted.
adapters: >-
        -a GAGATAATTGCCATTATRGAMGAAGAGVG
        -G ^CBCTCTTCKTCYATAATGGCAATTATCTC
        -g ^AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT
        -g ^GCCTTGGCAGTCTCAG
        -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC
        -a ATCTCGTATGCCGTCTTCTGCTTG
        -G ^CAAGCAGAAGACGGCATACGAGAT
        -G ^GTGACTGGAGTTCAGACGTGTGCTCTTCCGATCTC
        -A CTGAGACTGCCAAGGC
        -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT

#single-end test
#adapters: >-
#          -a GAGATAATTGCCATTATRGAMGAAGAGVG
#          -g ^AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT
#          -g ^GCCTTGGCAGTCTCAG
#          -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC
#          -a ATCTCGTATGCCGTCTTCTGCTTG


# further options to pass to cutadapt; depending on your specific needs
# -n (--times) option = remove # adapters at most from a read (default is 1)
# --minimum-length; self explanatory
# -e == maximum error rate
cutadapt_extra: "-n 8 --minimum-length 12 -e 0.2"


#### Trimmomatic trimming options  ####
trimmer: [SLIDINGWINDOW:4:15 MINLEN:12]
compression_level: "-9"

#### change length of overlap region (start/end of reads) used for identification algorithm ####
### - default is 9 = Mutator transposons  ###
overlap_size: 9

#### change minimum amount of support needed to call insertion - default: 2  ####
### in this example this would necessitate at least two reads that end & 2 reads which start with the overlap (TSD) ###
overlap_support: 2

#### add upstream or downstream bases (integer) to gene models to include regulatory regions, promoter sequences etc. ####
### note that gene length as reported in the final results is not impacted by this ###
### leave at zero if this is not wished:
extension: 0


#### Thread options: ####
### for fastqc and trimmomatic the thread usage is put to 2 and 4 respectively - IMO best in most cases ###
threads_fastqc: 4
threads_cutadapt: 4
threads_trimmomatic: 4
threads_bowtie_index: 8
threads_bowtie_align: 8
threads_sam_to_sorted_bam: 8
threads_index_sorted_bams_with_dups: 4
threads_index_sorted_bams_without_dups: 4
threads_convert_bam_to_sam: 4
#for optimal performance
#GRID approach -  set this to #Col + #Row
#GENERIC approach set this to # samples
threads_identify_Mu_insertions: 48
threads_te_typing_seqkit: 4
te_typing_cluster_cores: 48

#### TE typing ####
SAMPLES: ['Row_01', 'Row_02', 'Row_03', 'Row_04',
          'Row_05', 'Row_06', 'Row_07', 'Row_08',
          'Row_09', 'Row_10', 'Row_11', 'Row_12',
          'Row_13', 'Row_14', 'Row_15', 'Row_16',
          'Row_17', 'Row_18', 'Row_19', 'Row_20',
          'Row_21', 'Row_22', 'Row_23', 'Row_24',
          'Col_01', 'Col_02', 'Col_03', 'Col_04',
          'Col_05', 'Col_06', 'Col_07', 'Col_08',
          'Col_09', 'Col_10', 'Col_11', 'Col_12',
          'Col_13', 'Col_14', 'Col_15', 'Col_16',
          'Col_17', 'Col_18', 'Col_19', 'Col_20',
          'Col_21', 'Col_22', 'Col_23', 'Col_24']

PAIRED: ['1', '2']


#INSERTION_TABLES_GRID: ["germinal_identified_insertions_annotated"]

INSERTION_TABLES_GRID: ["germinal_identified_insertions_annotated",
                        "germinal_identified_insertions",
                        "all_identified_insertions_annotated",
                        "all_identified_insertions"]

INSERTION_TABLES_GENERIC: ["all_identified_insertions_annotated",
                           "all_identified_insertions"]


# TE (sub-)types - Mu6_R unknown
#if unknown or _L and _R TIR of same type the same then add pseudosequence for either _L or _R
#TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
TE_types:
  Mu1_L: CCCTCTTCGTCCATAATGGCAATTATCTC
  Mu1_R: CTCTCTTCGTCCATAATGGCAATTATCTC
  Mu2_L: CCCTCTTCGTCCATAATAGCACTTATCTC
  Mu2_R: CCCTCTTCGTCCATAATGGCAATTATCTC
  Mu3_L: GTCTCTTCTTCCATAATGGCAATTATCTC
  Mu3_R: CTCTCTTCTTCTATAATGGCAATTATCTC
  Mu4_L: CTCTCTTCTTCTATAATGGCAATTATCTC
  Mu4_R: TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
  Mu5_L: CTCTCCTCGTCCATAATGACAATTATCTC
  Mu5_R: CTCTCTTCGTCCATAATGGCAATTATCTC
  Mu6_L: CTCTTTGTCTATAATGGCAATTATCTC
  Mu6_R: TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
  Mu7_L: CTCTCTTCGTCCATAATGGCAATTATCTC
  Mu7_R: TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
  Mu8_L: CGCTCTTCGTCTATAATGACAATTATCTC
  Mu8_R: CGCTCTTCGTCTATAATGGCAATTATCTC
  MuDR_L: CGCTCTTCGTCTATAATGGCAATTATCTC
  MuDR_R: TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
  Mu10_L: GTCTTTTGTTTCATAATGGCAATTGTCTC
  Mu10_R: GTCTGGTGTTTTATAATGGCAATTGTCTC
  Mu11_L: CTCTCTTCTTCCATAATGGCAATTATCTC
  Mu11_R: CTCTCTTCGTCTATAATCGCAATTGTCTC
  Mu12_L: CCGTCGTGTTTCATAATACCAAATTTCTC
  Mu12_R: TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
  Mu13_L: CTCTCTTCTTCCATAATGACAATTATCTC
  Mu13_R: CTCTCTTCTTCCATAATGTCAATTATCTC
  Mu14_L: CTCTCTTCTTCCATAATGGCAATTATCTC
  Mu14_R: CTCTCTTCTTCCATAATAGCAATTATCTC
  Mu15_L: CTTTCTTCTTTCATAATGGCAATTATCTC
  Mu15_R: CTCTCTTCTTCTATAATAGCAATTATCTC
  Mu16_L: CTCTCTTCTTCCATAATGGCAATTATCTC
  Mu16_R: CTTCTTTCTTCCATAATGGCAATTATCTC
  Mu17_L: CTCTCTTCGTCCATAATGGCAATTATCTC
  Mu17_R: TTTTAAAAATTTTAAGGGCTCTCTCTCTCTCGGGGCGCGCGCGCGCGTTTTTGGGCCCGCGCGCGCGCGCGTTTCTCTCTCTCCTCTCTCTCTCTCTCTCTTGGGCGC
  Mu18_L: GTCTGTTGTTTCATAATGGCAATTGTCTC
  Mu18_R: GTCTGTTGTTTCATAACGGCAATTGTCTC
  Mu19_L: CTCTCTTCTTCCATAATGGCAATTATCTC
  Mu19_R: CTCTGTTGTTTCATAATGGCAATTGTCTC

